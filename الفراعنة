d(embed=embed)

# تشغيل const { Client, GatewayIntentBits } = require('discord.js');
const ytdl = require('ytdl-core');
const mongoose = require('mongoose');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
});

client.on('ready', () => {
  console.log(`تم تسجيل الدخول كـ ${client.user.tag}!`);
});

// بوت المتاجر (مثال بسيط)
const store = new Map(); // لتخزين المنتجات
client.on('messageCreate', (message) => {
  if (message.content.startsWith('!أضفمنتج')) {
    const args = message.content.split(' ').slice(1);
    const [name, price] = args;
    store.set(name, { price });
    message.reply(`تم إضافة المنتج: ${name} بسعر ${price}`);
  }
  if (message.content === '!عرضالمتجر') {
    let storeList = 'قائمة المتجر:\n';
    store.forEach((value, key) => {
      storeList += `${key}: ${value.price} coin\n`;
    });
    message.reply(storeList);
  }
});

// بوت عجلة الحظ
client.on('messageCreate', (message) => {
  if (message.content === '!دورعجلة') {
    const prizes = ['100 coins', 'لا جائزة', 'عنصر إضافي', '500 coins'];
    const randomPrize = prizes[Math.floor(Math.random() * prizes.length)];
    message.reply(`لقد حصلت على: ${randomPrize}`);
  }
});

// بوت الأغاني
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } = require('@discordjs/voice');

client.on('messageCreate', async (message) => {
  if (message.content.startsWith('!شغل')) {
    const args = message.content.split(' ').slice(1);
    const url = args.join(' ');
    if (!ytdl.validateURL(url)) return message.reply('رابط غير صالح!');

    const connection = joinVoiceChannel({
      channelId: message.member.voice.channelId,
      guildId: message.guild.id,
      adapterCreator: message.guild.voiceAdapterCreator,
    });

    const stream = ytdl(url, { filter: 'audioonly' });
    const resource = createAudioResource(stream);
    const player = createAudioPlayer();
    connection.subscribe(player);
    player.play(resource);

    player.on(AudioPlayerStatus.Idle, () => connection.destroy());
    message.reply('تم تشغيل الأغنية!');
  }
});

// أمر التحذير
client.on('messageCreate', (message) => {
  if (message.content.startsWith('!تحذير')) {
    if (!message.member.permissions.has('MANAGE_MESSAGES')) {
      return message.reply('ليس لديك صلاحية لإعطاء تحذيرات.');
    }
    const args = message.content.split(' ').slice(1);
    const member = message.mentions.members.first();
    if (!member) return message.reply('من فضلك أذكر العضو الذي تريد تحذيره.');
    const reason = args.slice(1).join(' ') || 'لا يوجد سبب محدد';
    message.reply(`${member.user.tag} تم تحذيره بسبب: ${reason}`);
  }
});

// أمر الميوت
client.on('messageCreate', (message) => {
  if (message.content.startsWith('!ميوت')) {
    if (!message.member.permissions.has('MUTE_MEMBERS')) {
      return message.reply('ليس لديك صلاحية للميوت.');
    }
    const args = message.content.split(' ').slice(1);
    const member = message.mentions.members.first();
    if (!member) return message.reply('من فضلك أذكر العضو الذي تريد ميوت له.');
    member.voice.setMute(true);
    message.reply(`${member.user.tag} تم ميوت له.`);
  }
});

// أمر السحب
client.on('messageCreate', (message) => {
  if (message.content.startsWith('!سحب')) {
    if (!message.member.permissions.has('KICK_MEMBERS')) {
      return message.reply('ليس لديك صلاحية للسحب.');
    }
    const args = message.content.split(' ').slice(1);
    const member = message.mentions.members.first();
    if (!member) return message.reply('من فضلك أذكر العضو الذي تريد سحبه.');
    member.kick();
    message.reply(`${member.user.tag} تم سحبه من الخادم.`);
  }
});

client.login('MTMxODY4ODQwMTAzMzEzNDEyMA.GkraDH.fw0hxUHRnWfW08e_iE0w5jSweWdmX8E5zI-txY');
